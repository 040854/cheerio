{"name":"Cheerio","tagline":"Fast, flexible, and lean implementation of core jQuery designed specifically for the server.","body":"# cheerio [![Build Status](https://secure.travis-ci.org/MatthewMueller/cheerio.png?branch=master)](http://travis-ci.org/MatthewMueller/cheerio)\r\n\r\nFast, flexible, and lean implementation of core jQuery designed specifically for the server.\r\n\r\n## Introduction\r\nTeach your server HTML.\r\n\r\n```js\r\nvar cheerio = require('cheerio'),\r\n    $ = cheerio.load('<h2 class = \"title\">Hello world</h2>');\r\n\r\n$('h2.title').text('Hello there!');\r\n$('h2').addClass('welcome');\r\n\r\n$.html();\r\n//=> <h2 class = \"title welcome\">Hello there!</h2>\r\n```\r\n\r\n## Installation\r\n`npm install cheerio`\r\n\r\n## Features\r\n__&#10084; Familiar syntax:__\r\nCheerio implements a subset of core jQuery. Cheerio removes all the DOM inconsistencies and browser cruft from the jQuery library, revealing its truly gorgeous API.\r\n\r\n__&#991; Blazingly fast:__\r\nCheerio works with a very simple, consistent DOM model. As a result parsing, manipulating, and rendering are incredibly efficient. Preliminary end-to-end benchmarks suggest that cheerio is about __8x__ faster than JSDOM.\r\n\r\n__&#10049; Insanely flexible:__\r\nCheerio wraps around @FB55's forgiving htmlparser. Cheerio can parse nearly any HTML or XML document.\r\n\r\n## What about JSDOM?\r\nI wrote cheerio because I found myself increasingly frustrated with JSDOM. For me, there were three main sticking points that I kept running into again and again:\r\n\r\n__&#8226; JSDOM's built-in parser is too strict:__\r\n  JSDOM's bundled HTML parser cannot handle many popular sites out there today.\r\n\r\n__&#8226; JSDOM is too slow:__\r\nParsing big websites with JSDOM has a noticeable delay.\r\n\r\n__&#8226; JSDOM feels too heavy:__\r\nThe goal of JSDOM is to provide an identical DOM environment as what we see in the browser. I never really needed all this, I just wanted a simple, familiar way to do HTML manipulation.\r\n\r\n## When I would use JSDOM\r\n\r\nCheerio will not solve all your problems. I would still use JSDOM if I needed to work in a browser-like environment on the server, particularly if I wanted to automate functional tests.\r\n\r\n## API\r\n\r\n### Markup example we'll be using:\r\n\r\n```html\r\n<ul id=\"fruits\">\r\n  <li class=\"apple\">Apple</li>\r\n  <li class=\"orange\">Orange</li>\r\n  <li class=\"pear\">Pear</li>\r\n</ul>\r\n```\r\n\r\nThis is the HTML markup we will be using in all of the API examples.\r\n\r\n### Loading\r\nFirst you need to load in the HTML. This step in jQuery is implicit, since jQuery operates on the one, baked-in DOM. With Cheerio, we need to pass in the HTML document.\r\n\r\nThis is the _preferred_ method:\r\n\r\n```js\r\nvar cheerio = require('cheerio'),\r\n    $ = cheerio.load('<ul id = \"fruits\">...</ul>');\r\n```\r\n\r\nOptionally, you can also load in the HTML by passing the string as the context:\r\n\r\n```js\r\n$ = require('cheerio');\r\n$('ul', '<ul id = \"fruits\">...</ul>');\r\n```\r\n\r\nOr as the root:\r\n\r\n```js\r\n$ = require('cheerio');\r\n$('li', 'ul', '<ul id = \"fruits\">...</ul>');\r\n```\r\n\r\nYou can also pass an extra object to `.load()` if you need to modify any\r\nof the default parsing options:\r\n\r\n```js\r\n$ = cheerio.load('<ul id = \"fruits\">...</ul>', {\r\n    ignoreWhitespace: true,\r\n    xmlMode: true\r\n});\r\n```\r\n\r\nThese parsing options are taken directly from htmlparser, therefore any options that can be used in htmlparser\r\nare valid in cheerio as well. The default options are:\r\n\r\n```js\r\n{\r\n    ignoreWhitespace: false,\r\n    xmlMode: false,\r\n    lowerCaseTags: false\r\n}\r\n```\r\n\r\nFor a list of options and their effects, see [this](https://github.com/FB55/node-htmlparser/wiki/DOMHandler) and\r\n[this](https://github.com/FB55/node-htmlparser/wiki/Parser-options).\r\n\r\n### Selectors\r\n\r\nCheerio's selector implementation is nearly identical to jQuery's, so the API is very similar.\r\n\r\n#### $( selector, [context], [root] )\r\n`selector` searches within the `context` scope which searches within the `root` scope. `selector` and `context` can be an string expression, DOM Element, array of DOM elements, or cheerio object. `root` is typically the HTML document string.\r\n\r\nThis selector method is the starting point for traversing and manipulating the document. Like jQuery, it's the primary method for selecting elements in the document, but unlike jQuery it's built on top of the CSSSelect library, which implements most of the Sizzle selectors.\r\n\r\n```js\r\n$('.apple', '#fruits').text()\r\n//=> Apple\r\n\r\n$('ul .pear').attr('class')\r\n//=> pear\r\n\r\n$('li[class=orange]').html()\r\n//=> <li class = \"orange\">Orange</li>\r\n```\r\n\r\n### Attributes\r\nMethods for getting and modifying attributes.\r\n\r\n#### .attr( name, value )\r\nMethod for getting and setting attributes. Gets the attribute value for only the first element in the matched set. If you set an attribute's value to `null`, you remove that attribute. You may also pass a `map` and `function` like jQuery.\r\n\r\n```js\r\n$('ul').attr('id')\r\n//=> fruits\r\n\r\n$('.apple').attr('id', 'favorite').html()\r\n//=> <li class = \"apple\" id = \"favorite\">Apple</li>\r\n```\r\n\r\n> See http://api.jquery.com/attr/ for more information\r\n\r\n#### .removeAttr( name )\r\nMethod for removing attributes by `name`.\r\n\r\n```js\r\n$('.pear').removeAttr('class').html()\r\n//=> <li>Pear</li>\r\n```\r\n\r\n#### .hasClass( className )\r\nCheck to see if *any* of the matched elements have the given `className`.\r\n\r\n```js\r\n$('.pear').hasClass('pear')\r\n//=> true\r\n\r\n$('apple').hasClass('fruit')\r\n//=> false\r\n\r\n$('li').hasClass('pear')\r\n//=> true\r\n```\r\n\r\n#### .addClass( className )\r\nAdds class(es) to all of the matched elements. Also accepts a `function` like jQuery.\r\n\r\n```js\r\n$('.pear').addClass('fruit').html()\r\n//=> <li class = \"pear fruit\">Pear</li>\r\n\r\n$('.apple').addClass('fruit red').html()\r\n//=> <li class = \"apple fruit red\">Apple</li>\r\n```\r\n\r\n> See http://api.jquery.com/addClass/ for more information.\r\n\r\n#### .removeClass( [className] )\r\nRemoves one or more space-separated classes from the selected elements. If no `className` is defined, all classes will be removed. Also accepts a `function` like jQuery.\r\n\r\n```js\r\n$('.pear').removeClass('pear').html()\r\n//=> <li class = \"\">Pear</li>\r\n\r\n$('.apple').addClass('red').removeClass().html()\r\n//=> <li class = \"\">Apple</li>\r\n```\r\n\r\n> See http://api.jquery.com/removeClass/ for more information.\r\n\r\n\r\n### Traversing\r\n\r\n#### .find(selector)\r\nGet a set of descendants filtered by `selector` of each element in the current set of matched elements.\r\n\r\n```js\r\n$('#fruits').find('li').length\r\n//=> 3\r\n```\r\n\r\n#### .parent()\r\nGets the parent of the first selected element.\r\n\r\n```js\r\n$('.pear').parent().attr('id')\r\n//=> fruits\r\n```\r\n\r\n#### .next()\r\nGets the next sibling of the first selected element.\r\n\r\n```js\r\n$('.apple').next().hasClass('orange')\r\n//=> true\r\n```\r\n\r\n#### .prev()\r\nGets the previous sibling of the first selected element.\r\n\r\n```js\r\n$('.orange').prev().hasClass('apple')\r\n//=> true\r\n```\r\n\r\n#### .siblings()\r\nGets the first selected element's siblings, excluding itself.\r\n\r\n```js\r\n$('.pear').siblings().length\r\n//=> 2\r\n```\r\n\r\n#### .children( selector )\r\nGets the children of the first selected element.\r\n\r\n```js\r\n$('#fruits').children().length\r\n//=> 3\r\n\r\n$('#fruits').children('.pear').text()\r\n//=> Pear\r\n```\r\n\r\n#### .each( function(index, element) )\r\nIterates over a cheerio object, executing a function for each matched element. When the callback is fired, the function is fired in the context of the DOM element, so `this` refers to the current element, which is equivalent to the function parameter `element`. To break out of the `each` loop early, return with `false`.\r\n\r\n```js\r\nvar fruits = [];\r\n\r\n$('li').each(function(i, elem) {\r\n  fruits[i] = $(this).text();\r\n});\r\n\r\nfruits.join(', ');\r\n//=> Apple, Orange, Pear\r\n```\r\n\r\n#### .map( function(index, element) )\r\nIterates over a cheerio object, executing a function for each selected element. Map will return an `array` of return values from each of the functions it iterated over. The function is fired in the context of the DOM element, so `this` refers to the current element, which is equivalent to the function parameter `element`.\r\n\r\n```js\r\n$('li').map(function(i, el) {\r\n  // this === el\r\n  return $(this).attr('class');\r\n}).join(', ');\r\n//=> apple, orange, pear\r\n```\r\n\r\n#### .filter( selector ) <br /> .filter( function(index) )\r\n\r\nIterates over a cheerio object, reducing the set of selector elements to those that match the selector or pass the function's test. If using the function method, the function is executed in the context of the selected element, so `this` refers to the current element.\r\n\r\nSelector:\r\n\r\n```js\r\n$('li').filter('.orange').attr('class');\r\n//=> orange\r\n```\r\n\r\nFunction:\r\n\r\n```js\r\n$('li').filter(function(i, el) {\r\n  // this === el\r\n  return $(this).attr('class') === 'orange';\r\n}).attr('class')\r\n//=> orange\r\n```\r\n\r\n#### .first()\r\nWill select the first element of a cheerio object\r\n\r\n```js\r\n$('#fruits').children().first().text()\r\n//=> Apple\r\n```\r\n\r\n#### .last()\r\nWill select the last element of a cheerio object\r\n\r\n```js\r\n$('#fruits').children().last().text()\r\n//=> Pear\r\n```\r\n\r\n#### .eq( i )\r\nReduce the set of matched elements to the one at the specified index. Use `.eq(-i)` to count backwards from the last selected element.\r\n\r\n```js\r\n$('li').eq(0).text()\r\n//=> Apple\r\n\r\n$('li').eq(-1).text()\r\n//=> Pear\r\n```\r\n\r\n### Manipulation\r\nMethods for modifying the DOM structure.\r\n\r\n#### .append( content, [content, ...] )\r\nInserts content as the *last* child of each of the selected elements.\r\n\r\n```js\r\n$('ul').append('<li class = \"plum\">Plum</li>')\r\n$.html()\r\n//=>  <ul id = \"fruits\">\r\n//      <li class = \"apple\">Apple</li>\r\n//      <li class = \"orange\">Orange</li>\r\n//      <li class = \"pear\">Pear</li>\r\n//      <li class = \"plum\">Plum</li>\r\n//    </ul>\r\n```\r\n\r\n#### .prepend( content, [content, ...] )\r\nInserts content as the *first* child of each of the selected elements.\r\n\r\n```js\r\n$('ul').prepend('<li class = \"plum\">Plum</li>')\r\n$.html()\r\n//=>  <ul id = \"fruits\">\r\n//      <li class = \"plum\">Plum</li>\r\n//      <li class = \"apple\">Apple</li>\r\n//      <li class = \"orange\">Orange</li>\r\n//      <li class = \"pear\">Pear</li>\r\n//    </ul>\r\n```\r\n\r\n#### .after( content, [content, ...] )\r\nInsert content next to each element in the set of matched elements.\r\n\r\n```js\r\n$('.apple').after('<li class = \"plum\">Plum</li>')\r\n$.html()\r\n//=>  <ul id = \"fruits\">\r\n//      <li class = \"apple\">Apple</li>\r\n//      <li class = \"plum\">Plum</li>\r\n//      <li class = \"orange\">Orange</li>\r\n//      <li class = \"pear\">Pear</li>\r\n//    </ul>\r\n```\r\n\r\n#### .before( content, [content, ...] )\r\nInsert content previous to each element in the set of matched elements.\r\n\r\n```js\r\n$('.apple').before('<li class = \"plum\">Plum</li>')\r\n$.html()\r\n//=>  <ul id = \"fruits\">\r\n//      <li class = \"plum\">Plum</li>\r\n//      <li class = \"apple\">Apple</li>\r\n//      <li class = \"orange\">Orange</li>\r\n//      <li class = \"pear\">Pear</li>\r\n//    </ul>\r\n```\r\n\r\n#### .remove( [selector] )\r\nRemoves the set of matched elements from the DOM and all their children. `selector` filters the set of matched elements to be removed.\r\n\r\n```js\r\n$('.pear').remove()\r\n$.html()\r\n//=>  <ul id = \"fruits\">\r\n//      <li class = \"apple\">Apple</li>\r\n//      <li class = \"orange\">Orange</li>\r\n//    </ul>\r\n```\r\n\r\n#### .replaceWith( content )\r\nReplaces matched elements with `content`.\r\n\r\n```js\r\nvar plum = $('<li class = \"plum\">Plum</li>')\r\n$('.pear').replaceWith(plum)\r\n$.html()\r\n//=> <ul id = \"fruits\">\r\n//     <li class = \"apple\">Apple</li>\r\n//     <li class = \"orange\">Orange</li>\r\n//     <li class = \"plum\">Plum</li>\r\n//   </ul>\r\n```\r\n\r\n#### .empty()\r\nEmpties an element, removing all it's children.\r\n\r\n```js\r\n$('ul').empty()\r\n$.html()\r\n//=>  <ul id = \"fruits\"></ul>\r\n```\r\n\r\n#### .html( [htmlString] )\r\nGets an html content string from the first selected element. If `htmlString` is specified, each selected element's content is replaced by the new content.\r\n\r\n```js\r\n$('.orange').html()\r\n//=> Orange\r\n\r\n$('#fruits').html('<li class = \"mango\">Mango</li>').html()\r\n//=> <li class=\"mango\">Mango</li>\r\n```\r\n\r\n#### .text( [textString] )\r\nGet the combined text contents of each element in the set of matched elements, including their descendants.. If `textString` is specified, each selected element's content is replaced by the new text content.\r\n\r\n```js\r\n$('.orange').text()\r\n//=> Orange\r\n\r\n$('ul').text()\r\n//=>  Apple\r\n//    Orange\r\n//    Pear\r\n```\r\n\r\n### Rendering\r\nWhen you're ready to render the document, you can use `html` utility function:\r\n\r\n```js\r\n$.html()\r\n//=>  <ul id = \"fruits\">\r\n//      <li class = \"apple\">Apple</li>\r\n//      <li class = \"orange\">Orange</li>\r\n//      <li class = \"pear\">Pear</li>\r\n//    </ul>\r\n```\r\n\r\nIf you want to return the outerHTML you can use `$.html(selector)`:\r\n\r\n```js\r\n$.html('.pear')\r\n//=> <li class = \"pear\">Pear</li>\r\n```\r\n\r\n### Miscellaneous\r\nDOM element methods that don't fit anywhere else\r\n\r\n#### .toArray()\r\nRetrieve all the DOM elements contained in the jQuery set, as an array.\r\n\r\n```js\r\n$('li').toArray()\r\n//=> [ {...}, {...}, {...} ]\r\n```\r\n\r\n#### .clone() ####\r\nClone the cheerio object.\r\n\r\n```js\r\nvar moreFruit = $('#fruits').clone()\r\n```\r\n\r\n### Utilities\r\n\r\n#### $.root\r\n\r\nSometimes you need to work with the top-level root element. To query it, you can use `$.root()`.\r\n\r\n```js\r\n$.root().append('<ul id=\"vegetables\"></ul>').html();\r\n//=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\r\n```\r\n\r\n#### $.contains( container, contained )\r\nChecks to see if the `contained` DOM element is a descendent of the `container` DOM element.\r\n\r\n## Screencasts\r\n\r\nhttp://vimeo.com/31950192\r\n\r\n> This video tutorial is a follow-up to Nettut's \"How to Scrape Web Pages with Node.js and jQuery\", using cheerio instead of JSDOM + jQuery. This video shows how easy it is to use cheerio and how much faster cheerio is than JSDOM + jQuery.\r\n\r\n## Test Coverage\r\n\r\nCheerio has high-test coverage, you can view the report [here](https://s3.amazonaws.com/MattMueller/Coverage/cheerio.html).\r\n\r\n## Testing\r\n\r\nTo run the test suite, download the repository, then within the cheerio directory, run:\r\n\r\n```shell\r\nmake setup\r\nmake test\r\n```\r\n\r\nThis will download the development packages and run the test suite.\r\n\r\n## Contributors\r\n\r\nThese are some of the contributors that have made cheerio possible:\r\n\r\n```\r\nproject  : cheerio\r\nrepo age : 1 year, 4 months ago\r\ncommits  : 416\r\nactive   : 118 days\r\nfiles    : 26\r\nauthors  :\r\n  278 Matt Mueller            66.8%\r\n   68 Matthew Mueller         16.3%\r\n   27 David Chambers          6.5%\r\n   15 Siddharth Mahendraker   3.6%\r\n    7 ironchefpython          1.7%\r\n    5 Jos Shepherd            1.2%\r\n    5 Ben Sheldon             1.2%\r\n    2 alexbardas              0.5%\r\n    2 Rob Ashton              0.5%\r\n    1 mattym                  0.2%\r\n    1 Chris O'Hara            0.2%\r\n    1 Mike Pennisi            0.2%\r\n    1 Rob \"Hurricane\" Ashton  0.2%\r\n    1 Sindre Sorhus           0.2%\r\n    1 Wayne Larsen            0.2%\r\n    1 Ben Atkin               0.2%\r\n```\r\n\r\n## Special Thanks\r\n\r\nThis library stands on the shoulders of some incredible developers. A special thanks to:\r\n\r\n__&#8226; @FB55 for node-htmlparser2 & CSSSelect:__\r\nFelix has a knack for writing speedy parsing engines. He completely re-wrote both @tautologistic's `node-htmlparser` and @harry's `node-soupselect` from the ground up, making both of them much faster and more flexible. Cheerio would not be possible without his foundational work\r\n\r\n__&#8226; @jQuery team for jQuery:__\r\nThe core API is the best of it's class and despite dealing with all the browser inconsistencies the code base is extremely clean and easy to follow. Much of cheerio's implementation and documentation is from jQuery. Thanks guys.\r\n\r\n__&#8226; @visionmedia:__\r\nThe style, the structure, the open-source\"-ness\" of this library comes from studying TJ's style and using many of his libraries. This dude consistently pumps out high-quality libraries and has always been more than willing to help or answer questions. You rock TJ.\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Matt Mueller &lt;mattmuelle@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}